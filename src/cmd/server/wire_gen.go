// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/nejtr0n/api_example/app"
	"github.com/nejtr0n/api_example/app/utils"
	"github.com/nejtr0n/api_example/domain"
	"github.com/nejtr0n/api_example/domain/services"
	"github.com/nejtr0n/api_example/infrastructure/persistence/mongodb"
	"github.com/nejtr0n/api_example/ui/grpc"
	"github.com/urfave/cli/v2"
)

// Injectors from wire.go:

func initializeApp(config *cli.Context, version2 app.Version, revision2 app.Revision) (*app.Application, func(), error) {
	logger, err := app.NewLogger(config)
	if err != nil {
		return nil, nil, err
	}
	csvLoader := services.NewCsvLoader()
	csvReaderFactory := services.NewCsvReaderFactory()
	fetchTimeout, err := services.NewFetchTimeout(config)
	if err != nil {
		return nil, nil, err
	}
	timer := utils.NewRealTimer()
	csvParser := services.NewCsvParser(csvReaderFactory, fetchTimeout, timer)
	client, cleanup, err := mongodb.NewMongoConnection(config)
	if err != nil {
		return nil, nil, err
	}
	appMongoDatabase := mongodb.NewAppMongoDatabase(config)
	productsCollection := mongodb.NewProductsCollection(client, appMongoDatabase)
	productBulkSize := mongodb.NewProductBulkSize(config)
	productsRepository := mongodb.NewProductsRepository(productsCollection, productBulkSize)
	apiService := domain.NewApiService(csvLoader, csvParser, productsRepository)
	apiExampleServer := api_example.NewServer(apiService)
	application, err := app.NewApplication(version2, revision2, config, logger, apiExampleServer)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return application, func() {
		cleanup()
	}, nil
}
